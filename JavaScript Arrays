 Non Primitive Types
- They are mutable types.
- They don't have a fixed range for value.
- The value range changes according to memory available.
- They are stored in a heap memory.
- You can access in random.

    1. Array
    2. Object
    3. Map
    4. Set (Obsolete)


                                Array
- Arrays are used in computer programming to reduce overhead and complexity.
- Array can reduce overhead by storing values in sequential order.
- Array reduces complexity by storing multiple values under one name.
- Array can handle different types of values in sequential order.
- Array size can change dynamically.

Note: Several programming languages restrict array to same type of values and
      will not allow to change the size dynamically.

- Array refers to an arrangement of values in specific sequence and allows access in random.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                       Array Configuration

Array
- Reduce Overhead
- Reduce Complexity
- Handle any type of data
- Size change dynamically
- Arrange elements in sequence and allow to access random.

Configuring Array:
1. You have to declare array

       var values;
       let  values;
       const values = initialization;

2. You have to initialize or assign memory for array.

3. Memory for array is defined using 2 techniques

    a) [ ]            meta character
    b) Array()        constructor

    var values = [ ];                => Initialization of memory
    var values = new Array();
   
              (or)

    var values;
    values = [ ];
                                => Assignment of memory
    var values;
    values = new Array();

FAQ: What is difference between "[ ]" & "Array()" ?
Ans:   [ ] configures static memory.
          Array() configures dynamic memory.

FAQ: What is static memory?
Ans:  It is continuous memory.
         The memory allocated for first request will be same across multiple requests.
     It is not safe and uses more memory.
         It is good for continuous operations.

FAQ: What is dynamic memory?
Ans:  It is discreet memory.
     Memory is newly allocated for every request.
     Memory is destroyed after current request.
     It is good for disconnected operations.

Storing values & Reading values from Array:
- Values are stored in array memory with reference of a "property".
- Property is a string type that maps to memory index.


Syntax:
        var values = [ 10, "A", true ];

        values["0"] = 20;        // valid
        values[0] = 30;        // valid

        console.log(values["1"]);        // valid    property
        console.log(values[1]);        // valid    property

- Array element can be any type
        a) Primitive
        b) Non Primitive
        c) Function
- If you have a function in array memory then it is accessed by using "IIFE" pattern.
  [Immediately Invoking Function Expression].

- A function in array memory will not have function name.
- A function without name is known as "Anonymous" function.

Syntax:
    (
      function(){ }
    )();

Ex:

<script>
     var values = [10, "John", true, ["Delhi", "Hyd"], function(){document.write("Hello ! from array")}];
     document.write(values[3][1] + "<br>");
     values[4]();
</script>

Ex:
<script>
     var values = [[[10, 20], ["A", "B"]]];

     document.write(values[0][1][1]);
</script>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
       Array Methods & Properties

1. length            : It returns the total count of elements in array.

Syntax:
     var values = [10, "A", true];
     values.length;                // 3

2. Reading Array Elements

        toString()            It returns all elements separated with "," delimiter.
        join()            It returns all elements with custom delimiter.
        map()            It returns all elements & index using iterator.
        forEach()            It is also same as map(), but map is a generator,
                        map is faster than forEach.
Syntax:
    values.toString()
    values.join( " > " );
   
    values.map(function(value, index){         Async

    })        

    values.forEach(function(value, index){        Sync

    })

Ex:
<script>
     var categories = ["All", "Electronics", "Fashion", "Footwear"];

     document.write(categories.join(' / '));
</script>

Ex:
<script>
     var categories = ["All", "Electronics", "Fashion", "Footwear"];

     categories.map(function(value, index){
          document.write(`[${index}][${typeof index}]:${value}<br>`);
     });

     categories.forEach(function(value, index){
          document.write(`[${index}][${typeof index}]:${value}<br>`);
     })
</script>

3. Reading Specific set of Elements

        slice()        It reads and returns elements between specified index.
        find()        It reads and return the first occurrence element that matches
                    given condition.
        filter()        It reads and returns all elements that match given condition.

Syntax:
    values.slice(startIndex, endIndex)

    values.find(function(value){            // return only one element

            return  value_condition;

    })

    values.filter(function(value){            // returns all elements that match condition

        return value_condition;
    })
   
Ex:
<script>
     var sales = [50000, 32000, 67000, 24560, 47000, 72000];

     var result =  sales.filter(function(value){
          return value>60000;
     });

     document.write(result.toString());
</script>


4. Reading Elements using explicit techniques

    for..in        It reads every property from collection.

    for..of        It reads every value from collection.

    loop            It uses condition, counter and initialization.
                [for, while, do while]


Syntax:
      for( var property in values )
      {
      }

      for( var value of values )
      {
      }

      for(var i=0; i<values.length; i++)
      {
      }

Ex:
<script>
     var sales = [50000, 32000, 67000, 24560, 47000, 72000];

     for(var property in sales){

          document.write(`${property} : ${sales[property]} <br>`);

     }
</script>


5. Sorting Elements
   
    sort()        It arranges elements in ascending order
    reverse()        It arranges elements in reverse order

Syntax:
     values.sort()
     values.reverse()

Ex:
<script>
     var cities = ["Hyd", "Bangalore", "Mumbai", "Delhi", "Goa", "Chennai"];

     cities.sort();
     cities.reverse();
     cities.map(function(city){
          document.write(city + "<br>");
     })
</script>

6. Adding elements into array

      push()        Adds new element(s) as last item.
      unshift()         Adds new element(s) as first item.
      splice()        Adds new element(s) at specific position.

Syntax:
      values.push("item1", "item2", ...)
      values.unshift("item1", "item2", ..)
      values.splice(startIndex, count_of_items_to_remove, "Item1", "Item2",..)

Note: Set delete count always zero for splice while adding elements.

Ex:
<script>
     var cities = ["Hyd", "Bangalore"];

     cities.splice(1, 0 ,"Delhi", "Chennai");
     cities.map(function(city, index){
          document.write(`[${index}] : ${city} <br>`);
     })
</script>

7. Removing Elements from Array

      pop()            Removes and returns the last element
      shift()            Removes and returns first element
      splice()            Removes and returns elements from specific index.

Syntax:
    values.pop()
    values.shift()
    values.splice(indexNumber, deleteCount)

Ex:
<script>
     var cities = ["Hyd", "Bangalore", "Delhi", "Chennai"];

     
     alert(`${cities.splice(1,2)} Removed`);
     
     cities.map(function(city, index){
          document.write(`[${index}] : ${city} <br>`);
     })
</script>

8. Finding Element in Array

    indexOf()            It returns index number of element in array.
    lastIndexOf()        It returns last occurrence index number of element in array

Note: If element not found then it returns -1.


Syntax:
     values.indexOf("element");        // 0, -1


Adding Elements into Page dynamically:

1. You have to create a new element and store in memory reference.

    - Elements are created by using "document.createElement()"

Syntax:
        var opt = document.createElement("option");
        var pic = document.createElement("img");
        var tab = document.createElement("table");

2. Set properties for element

        opt.text = " "
        opt.value= " "
        pic.src=" "
        tab.border="1"

3. Add element into page by using "appendChild()" method, you can add into any
    container that is relative to the child element.

        document.querySelector("select").appendChild(opt);
        document.querySelector("body").appendChild(pic);

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <script>
          function bodyload(){
               var opt1 = document.createElement("option");
               var opt2 = document.createElement("option");

               opt1.text = "Delhi";
               opt2.text = "Hyd";

               document.querySelector("select").appendChild(opt1);
               document.querySelector("select").appendChild(opt2);

               var pic = document.createElement("img");
               pic.src= "../public/images/women-fashion.jpg";
               pic.width="200";
               pic.height="200";

               document.querySelector("main").appendChild(pic);
          }
     </script>
</head>
<body onload="bodyload()">
     <select></select>
     <main></main>
</body>
</html>
